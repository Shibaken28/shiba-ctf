from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes
import random
import hashlib
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

# secp256k1
bitsize = 256
p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
a = 0
b = 7
Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
d = 0xbb7bff1091c3622dab0c27ad438703b56a3be7ea763c8e6ffd1ebba7edf84427


def double(p1):
    if p1 == None:
        return None
    if p1[1] == 0:
        return None
    phi = (3 * p1[0] * p1[0] + a) * inverse(2 * p1[1], p)
    psi = (-3*p1[0]*p1[0]*p1[0] - a*p1[0] + 2*p1[1]*p1[1]) * inverse(2*p1[1], p)
    x4 = (phi * phi - 2 * p1[0]) % p
    y4 = (-phi * x4 - psi) % p
    return (x4, y4)


def add(p1, p2):
    if p1 == None:
        return p2
    if p2 == None:
        return p1
    if p1[0] == p2[0] and p1[1] == p2[1]:
        return double(p1)

    
    phi = (p2[1] - p1[1]) * inverse(p2[0] - p1[0], p)
    psi = (p1[1] * p2[0] - p2[1] * p1[0]) * inverse(p2[0] - p1[0], p)
    x3 = (phi * phi - p1[0] - p2[0]) % p
    y3 = (-phi * x3 - psi) % p
    return (x3, y3)

def mul(p, n):
    if n == 0:
        return None
    if n == 1:
        return p
    res = None
    while n > 0:
        if n & 1:
            res = add(res, p)
        p = double(p)
        n >>= 1
    return res


signatures = [(60191627375235587190620917128791760917509382336446156527601401069485764198698, 72998849240219545122202025700542315671685510168331660858486474763489585643949), (77986804347517706073730186148237480687810594056978963512322833206670473381850, 81793218859747196786286952200329120150556134961556428929297201496782450144755), (9447379446080823750662706790534508474317853403282519388406521056582361013915, 3048372888820592127890475128940201745507942808395511853167956775121299609938), (107741583240802724072379572596613243524285493873217136464123124456015437757209, 9096505905079157721509938529911797736551719597538828333438057013426388342683), (83150169906753882458999955166063270902788959848868730970824883484449870542864, 101328743031881248581482845809113614361165360277778113251640093685945556408071), (7060917637880152603924447107852560732761820244913348858987747919456657283109, 10211958963500190295444525127991361129673508927760973793161220087085485464444), (26958670468951285748882689127211459605491877888464157185028034091828195796170, 59277299741698717760523553918579853330202869963627469189437767482947580475175), (66343697707686493466428838280742111615806686919817303149979020208604688608744, 93244935917492454591741519387148250641404187705947588518482786491116649604785), (102605831246446661587201691691596474504247095940155733120027077668489078501427, 109413774456935099897962414230289759338857191354466692045093329558672553178393), (24149585755971580933746550197453423577537486856301000885509671322623975901417, 66672194956319296202994098149428093042674482972362041962779776130305042964048), (9554040523241165904042812308232166393376975215454972361486511736911830866703, 106986184222884127326958443802614699684197217908360485482097135851810591720964), (96274441815388065508255037046433137865377829673924871350616496668762612138607, 4010495326240325674264900765528743875207281362343193274466811962361235756958), (81190926125870553489679225545842252320057234072067461575987319624455267540070, 3545398232859828684680870483508244629617895654409455226919118701973888216041), (94489981015589366531130579907632911091914312178401307816191454104941115683695, 80610453054280316709738605343119795011552952908197994688616746063109275872787), (113495069134122648670055308750738578574913779907146904098037991114812147794367, 15070041718587822608663713725967071916804987082310808787228050417657018238422), (44020206565139055431857936848526390766282023534328534752033646321405013050281, 75120641051269051090331188247473063364254829216659828087255281489437804959630)]
ciphertext = b'\x94z\xd9\x90z\xab\x9c\x9f"\xd3q\xa8C\xabI~s\x80\xd2\xac\xbew\x0f\xd3\xc3\x04\xaeW\x93c\xd4\x1c\x14\xcc1a\x94\xe1\x99\x10\x82r\xa2\xcc\xd8\x81\xe2\x94'

key = 0
Q = mul((Gx,Gy), d)

for i in range(0, len(signatures)):
    r = signatures[i][0]
    s = signatures[i][1]
    for hm in range(0, 256):
        print("hm: ", hm)
        w = inverse(s, n)
        u1 = (hm * w) % n
        u2 = (r * w) % n
        x, y = add(mul((Gx,Gy), u1), mul(Q, u2))        
        if x == r:
            key = key | (hm << (i*8))
            print("find key: ", hex(key))
            break

key = long_to_bytes(key)
cipher = AES.new(key, AES.MODE_ECB)
flag = cipher.decrypt(pad(ciphertext, 16))
print(flag)
